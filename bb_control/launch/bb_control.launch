<launch>

    <!-- By default, we are not in debug mode -->
    <arg name="debug" default="false" />

    <!-- Whether to control robot-->
    <arg name="bb_control" default="false" />

    <!--
  By default, hide joint_state_publisher's GUI

  MoveIt's "demo" mode replaces the real robot driver with the joint_state_publisher.
  The latter one maintains and publishes the current joint configuration of the simulated robot.
  It also provides a GUI to move the simulated robot around "manually".
  This corresponds to moving around the real robot without the use of MoveIt.
  -->
    <arg name="use_gui" default="false" />

    <!-- Gazebo specific options -->
    <arg name="gazebo" default="false"/>
    <arg name="gazebo_gui" default="true"/>
    <arg name="paused" default="false"/>
    <!-- By default, use the urdf location provided from the package -->
    <arg name="urdf_path" default="$(find bb_description)/urdf/bumblebee.urdf"/>

    <!-- launch the gazebo simulator and spawn the robot -->
    <include file="$(find bb_moveit_config)/launch/gazebo.launch" if="$(arg gazebo)">
        <arg name="paused" value="$(arg paused)"/>
        <arg name="gazebo_gui" value="$(arg gazebo_gui)"/>
        <arg name="urdf_path" value="$(arg urdf_path)"/>
    </include>

    <!-- launch the dynamixel controller for actual robot -->
    <include file="$(find bb_control)/launch/dxl_control.launch" if="$(arg bb_control)"/>
    <!--include file="$(find bb_control)/launch/dxl_arm.launch" if="$(arg bb_control)"/-->
    <!--include file="$(find bb_control)/launch/dxl_wrist.launch" if="$(arg bb_control)"/-->
    <!--include file="$(find bb_control)/launch/dxl_gripper.launch" if="$(arg bb_control)"/-->

    <node name="bb_dynamixel_controller" pkg="bb_control" type="bb_dynamixel_controller" output="screen" args="scoobs" if="$(arg bb_control)"/>

    <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
    <include file="$(find bb_moveit_config)/launch/planning_context.launch">
        <arg name="load_robot_description" value="false"/>
    </include>

    <!-- If needed, broadcast static tf for robot root -->

    <!-- TODO: Replace with dynamixel joint publisher -->

    <!-- We do not have a robot connected, so publish fake joint states -->
    <group if="$(eval arg('bb_control') == 0)">
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg use_gui)">
            <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
            <rosparam param="source_list">[/joint_states]</rosparam>
        </node>
        <node name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" if="$(arg use_gui)">
            <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
            <rosparam param="source_list">[/joint_states]</rosparam>
        </node>
    </group>

    <!-- Given the published joint states, publish tf for the robot links -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

    <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
    <include file="$(find bb_moveit_config)/launch/move_group.launch">
        <arg name="allow_trajectory_execution" value="true"/>
        <arg name="fake_execution" value="$(eval not arg('bb_control'))"/>
        <arg name="info" value="true"/>
        <arg name="debug" value="$(arg debug)"/>
    </include>

    <!-- Run Rviz and load the default config to see the state of the move_group node -->
    <include file="$(find bb_moveit_config)/launch/moveit_rviz.launch">
        <arg name="rviz_config" value="$(find bb_moveit_config)/launch/moveit.rviz"/>
        <arg name="debug" value="$(arg debug)"/>
    </include>

</launch>
